;;;;
;;;; tests
;;;;

(ql:quickload 'clrt)
(use-package 'linalg)

(defparameter *m* (make-instance 'matrix :rows 5 :cols 5 :generator #'(lambda (i j) (random 10.0))))
(matrix-print *m*)
(terpri)
(matrix-print (transposed *m*))
(terpri)
(matrix-print (m* 2.0 *m*))
(terpri)
(matrix-print (m* *m* 2.0))
(terpri)
(matrix-print *m*)
(terpri)
(format t "mult~%")
(matrix-print (mult 1.2 *m* *m* 1.2))
(terpri)
(format t "mult2~%")
(matrix-print (mult2 1.2 *m* *m* 1.2))
(terpri)
(matrix-print (m+ *m* *m*))
(terpri)
(matrix-print (make-vector 7 :orientation :row :generator #'(lambda (k) (random 100.0))))
(terpri)
(defparameter *v* (make-vector 10 :generator #'(lambda (k) (random 10.0))))
(matrix-print *v*)
(terpri)
(format t "vec-x: ~d   vec-y: ~d   vec-z: ~d" (vec-x *v*) (vec-y *v*) (vec-z *v*))
(terpri)
(terpri)
(setq *v* (make-vector 7 :generator #'(lambda (k) 1.0)))
(matrix-print *v*)
(format t "=> vec-length: ~d   eq.   (sqrt 7): ~d" (vec-length *v*) (sqrt 7.0))
(terpri)
(matrix-print (normalized *v*))
(format t "=> vec-length: ~d   eq.   ~d" (vec-length (normalized *v*)) 1.0)
(terpri)
(terpri)
(format t
"(cross :make-instance 'matrix :rows 3 :cols 1 :data (vector 1.0 0.0 0.0))
       :make-instance 'matrix :rows 3 :cols 1 :data (vector 0.0 1.0 0.0)))")
(terpri)
(matrix-print
 (cross (make-instance 'matrix :rows 3 :cols 1 :data (vector 1.0 0.0 0.0))
	(make-instance 'matrix :rows 3 :cols 1 :data (vector 0.0 1.0 0.0))))
(terpri)
(defparameter *a* (make-vector 3 :orientation :row :data #(1.0 2.0 3.0)))
(matrix-print *a*)
(format t "=> (length *a*)   .eq   (sprt (dot *a* *a*)) = ~d   .eq   (sqrt(14.0)) = ~d" (sqrt (dot *a* *a*)) (sqrt 14.0))
(terpri)
(quit)
